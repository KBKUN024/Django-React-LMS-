name: Deploy Django React LMS to Aliyun

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  # 使用标准的GitHub Container Registry进行构建和推送
  REGISTRY: ghcr.io
  # 您的加速域名用于拉取基础镜像
  PROXY_REGISTRY: 4w36ujeoko5joi-ghcr.xuanyuan.run
  IMAGE_NAME: kbkun024/django-react-lms

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Configure Docker to use proxy for base images
      run: |
        # 配置Docker daemon使用加速镜像
        echo '{"registry-mirrors": ["https://${{ env.PROXY_REGISTRY }}"]}' | sudo tee /etc/docker/daemon.json
        sudo systemctl restart docker

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./backend/Dockerfile.fast
        platforms: linux/amd64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./frontend/frontend/Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to Aliyun Server
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: 22
        timeout: 30s
        command_timeout: 10m
        script: |
          set -e
          echo "开始部署..."
          
          # 进入项目目录
          cd /opt/lms
          echo "当前目录: $(pwd)"
          
          # 停止旧容器
          echo "停止旧容器..."
          docker-compose -f docker-compose.yml down || true
          
          # 配置Docker使用加速镜像源
          echo "配置Docker镜像加速..."
          sudo mkdir -p /etc/docker
          echo '{
            "registry-mirrors": ["https://4w36ujeoko5joi-ghcr.xuanyuan.run"],
            "insecure-registries": ["4w36ujeoko5joi-ghcr.xuanyuan.run"]
          }' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker || true
          
          # 拉取预构建镜像（优先使用加速域名）
          echo "拉取预构建镜像..."
          docker pull 4w36ujeoko5joi-ghcr.xuanyuan.run/kbkun024/django-react-lms-backend:latest && \
          docker tag 4w36ujeoko5joi-ghcr.xuanyuan.run/kbkun024/django-react-lms-backend:latest lms-backend:latest || {
            echo "加速域名拉取失败，尝试直接拉取..."
            docker pull ghcr.io/kbkun024/django-react-lms-backend:latest && \
            docker tag ghcr.io/kbkun024/django-react-lms-backend:latest lms-backend:latest || {
              echo "镜像拉取失败，使用本地构建..."
              docker build --progress=plain -t lms-backend:latest -f backend/Dockerfile.server .
            }
          }
          
          docker pull 4w36ujeoko5joi-ghcr.xuanyuan.run/kbkun024/django-react-lms-frontend:latest && \
          docker tag 4w36ujeoko5joi-ghcr.xuanyuan.run/kbkun024/django-react-lms-frontend:latest lms-frontend:latest || {
            echo "加速域名拉取失败，尝试直接拉取..."
            docker pull ghcr.io/kbkun024/django-react-lms-frontend:latest && \
            docker tag ghcr.io/kbkun024/django-react-lms-frontend:latest lms-frontend:latest || {
              echo "镜像拉取失败，使用本地构建..."
              docker build --progress=plain -t lms-frontend:latest -f frontend/frontend/Dockerfile.server .
            }
          }
          
          # 创建环境变量文件
          echo "创建环境变量文件..."
          cat > .env << EOF
          SECRET_KEY=django-insecure-gpq1qn#va)#oje@0g8vwxjzjj-byze09(**2l^&*y2*1bs#ex*
          DEBUG=False
          DJANGO_DEV_MODE=True
          DEFAULT_FROM_EMAIL=944412796@qq.com
          SERVER_EMAIL=944412796@qq.com
          EMAIL_HOST=smtp.qq.com
          EMAIL_PORT=465
          EMAIL_USE_SSL=True
          EMAIL_HOST_USER=944412796@qq.com
          EMAIL_HOST_PASSWORD=ohkbmebjlamfbeef
          FRONTEND_SITE_URL=https://lms.tyuan21081.top
          EOF
          
          # 启动服务
          echo "启动服务..."
          docker-compose -f docker-compose.yml up -d
          
          # 等待容器启动并初始化
          echo "等待容器启动和初始化..."
          sleep 30
          
          # 检查后端是否正在运行
          echo "检查后端容器状态..."
          docker ps | grep lms-backend || echo "后端容器未运行"
          
          # 等待健康检查通过
          echo "等待健康检查通过..."
          for i in {1..12}; do
            if docker inspect lms-backend --format='{{.State.Health.Status}}' 2>/dev/null | grep -q "healthy"; then
              echo "后端容器健康检查通过！"
              break
            else
              echo "等待健康检查... ($i/12)"
              sleep 10
            fi
          done
          
          # 启动前端容器（确保后端已准备好）
          echo "启动前端容器..."
          docker-compose -f docker-compose.yml up -d frontend
          
          # 检查启动状态
          echo "检查容器状态..."
          docker-compose -f docker-compose.yml ps
          
          # 检查后端容器日志
          echo "检查后端容器日志..."
          docker-compose -f docker-compose.yml logs lms-backend --tail=20
          
          # 检查后端健康状态
          echo "检查后端健康状态..."
          docker inspect lms-backend --format='{{.State.Health.Status}}' || echo "健康检查不可用"
          
          # 检查所有容器日志
          echo "检查所有容器日志..."
          docker-compose -f docker-compose.yml logs --tail=10
          
          echo "部署完成！"
