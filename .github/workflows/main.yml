name: Deploy Django React LMS to Aliyun

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: kbkun024/django-react-lms

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./backend/Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./frontend/frontend/Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to Aliyun Server
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: 22
        timeout: 30s
        command_timeout: 10m
        script: |
          set -e
          echo "开始部署..."
          
          # 进入项目目录
          cd /opt/lms
          echo "当前目录: $(pwd)"
          
          # 停止旧容器
          echo "停止旧容器..."
          docker-compose -f docker-compose.yml down || true
          
          # 在服务器上直接构建镜像
          echo "构建backend镜像..."
          docker build -t lms-backend:latest -f backend/Dockerfile .
          echo "构建frontend镜像..."
          docker build -t lms-frontend:latest -f frontend/frontend/Dockerfile .
          
          # 更新docker-compose.yml中的镜像标签
          echo "更新配置文件..."
          sed -i "s|image: lms-backend:latest|image: lms-backend:latest|g" docker-compose.yml
          sed -i "s|image: lms-frontend:latest|image: lms-frontend:latest|g" docker-compose.yml
          
          # 启动新容器
          echo "启动容器..."
          docker-compose -f docker-compose.yml up -d
          
          # 检查启动状态
          echo "检查容器状态..."
          docker-compose -f docker-compose.yml ps
          
          # 检查容器日志
          echo "检查容器日志..."
          docker-compose -f docker-compose.yml logs --tail=10
          
          echo "部署完成！"
