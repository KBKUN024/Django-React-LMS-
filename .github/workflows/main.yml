name: Deploy Django React LMS to Aliyun

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  # 使用标准的GitHub Container Registry进行构建和推送
  REGISTRY: ghcr.io
  # 您的加速域名用于拉取基础镜像
  PROXY_REGISTRY: 4w36ujeoko5joi-ghcr.xuanyuan.run
  IMAGE_NAME: kbkun024/django-react-lms

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Configure Docker to use proxy for base images
        run: |
          # 配置Docker daemon使用加速镜像
          echo '{"registry-mirrors": ["https://${{ env.PROXY_REGISTRY }}"]}' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./frontend/frontend/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Aliyun Server
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.ALIYUN_HOST }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          key: ${{ secrets.ALIYUN_SSH_KEY }}
          port: 22
          timeout: 30s
          command_timeout: 10m
          script: |
            set -e
            echo "开始部署..."

            # 进入项目目录
            cd /opt/lms
            echo "当前目录: $(pwd)"

            # 停止旧容器
            echo "停止旧容器..."
            docker-compose -f docker-compose.yml down || true

            # 配置Docker使用加速镜像源
            echo "配置Docker镜像加速..."
            sudo mkdir -p /etc/docker
            echo '{
              "registry-mirrors": ["https://4w36ujeoko5joi-ghcr.xuanyuan.run"],
              "insecure-registries": ["4w36ujeoko5joi-ghcr.xuanyuan.run"]
            }' | sudo tee /etc/docker/daemon.json
            sudo systemctl restart docker || true

            # 拉取预构建镜像（优先使用加速域名）
            echo "拉取预构建镜像..."
            docker pull 4w36ujeoko5joi-ghcr.xuanyuan.run/kbkun024/django-react-lms-backend:latest && \
            docker tag 4w36ujeoko5joi-ghcr.xuanyuan.run/kbkun024/django-react-lms-backend:latest lms-backend:latest || {
              echo "加速域名拉取失败，尝试直接拉取..."
              docker pull ghcr.io/kbkun024/django-react-lms-backend:latest && \
              docker tag ghcr.io/kbkun024/django-react-lms-backend:latest lms-backend:latest || {
                echo "镜像拉取失败，使用本地构建..."
                docker build --progress=plain -t lms-backend:latest -f backend/Dockerfile.server .
              }
            }

            docker pull 4w36ujeoko5joi-ghcr.xuanyuan.run/kbkun024/django-react-lms-frontend:latest && \
            docker tag 4w36ujeoko5joi-ghcr.xuanyuan.run/kbkun024/django-react-lms-frontend:latest lms-frontend:latest || {
              echo "加速域名拉取失败，尝试直接拉取..."
              docker pull ghcr.io/kbkun024/django-react-lms-frontend:latest && \
              docker tag ghcr.io/kbkun024/django-react-lms-frontend:latest lms-frontend:latest || {
                echo "镜像拉取失败，使用本地构建..."
                docker build --progress=plain -t lms-frontend:latest -f frontend/frontend/Dockerfile.server .
              }
            }

            # 创建环境变量文件
            echo "创建环境变量文件..."
            cat > .env << EOF
            SECRET_KEY=${{secrets.SECRET_KEY}}
            DEBUG=False
            DJANGO_DEV_MODE=True
            DEFAULT_FROM_EMAIL=${{secrets.DEFAULT_FROM_EMAIL}}
            SERVER_EMAIL=${{secrets.SERVER_EMAIL}}
            EMAIL_HOST=${{secrets.EMAIL_HOST}}
            EMAIL_PORT=465
            EMAIL_USE_SSL=True
            EMAIL_HOST_USER=${{secrets.EMAIL_HOST_USER}}
            EMAIL_HOST_PASSWORD=${{secrets.EMAIL_HOST_PASSWORD}}
            BREVO_API_KEY = ${{secrets.BREVO_API_KEY}}
            FRONTEND_SITE_URL=https://lms.tyuan21081.top
            SITE_URL=https://lms.tyuan21081.top
            ALIPAY_SERVER_URL=https://openapi-sandbox.dl.alipaydev.com/gateway.do
            ALIPAY_APP_ID=${{secrets.ALIPAY_APP_ID}}
            ALIPAY_APP_PRIVATE_KEY=${{secrets.ALIPAY_APP_PRIVATE_KEY}}
            ALIPAY_PUBLIC_KEY=${{secrets.ALIPAY_PUBLIC_KEY}}
            ALIPAY_RETURN_URL=https://lms.tyuan21081.top/payment/return
            ALIPAY_NOTIFY_URL=https://lms.tyuan21081.top/payment/notify
            ALIPAY_SELLER_Id=${{secrets.ALIPAY_SELLER_Id}}
            STRIPE_SECRET_KEY=${{secrets.STRIPE_SECRET_KEY}}
            STRIPE_PUBLIC_KEY=${{secrets.STRIPE_PUBLIC_KEY}}
            PAYPAL_CLIENT_ID=${{secrets.PAYPAL_CLIENT_ID}}
            PAYPAL_SECRET_ID=${{secrets.PAYPAL_SECRET_ID}}
            PAYPAL_RECEIVER_EMAIL=${{secrets.PAYPAL_RECEIVER_EMAIL}}
            PAYPAL_TEST=True
            EOF
            
            # 验证.env文件创建
            echo "验证.env文件内容..."
            ls -la .env
            echo "前几行内容："
            head -5 .env
            
            # 检查容器内文件结构
            echo "检查容器内文件结构..."
            docker run --rm lms-backend:latest ls -la /app/
            docker run --rm lms-backend:latest ls -la /app/backend/ || echo "backend目录不存在"
            
            # 检查.env文件是否能被容器读取
            echo "测试.env文件挂载..."
            docker run --rm -v $(pwd)/.env:/opt/lms/.env lms-backend:latest cat /opt/lms/.env | head -3 || echo ".env文件挂载失败"
            
            # 只启动后端服务
            echo "启动后端服务..."
            docker-compose -f docker-compose.yml up -d backend

            # 等待容器启动并初始化
            echo "等待容器启动和初始化..."
            sleep 15

            # 立即检查后端容器日志
            echo "检查后端启动日志..."
            docker-compose -f docker-compose.yml logs backend --tail=30

            # 检查后端是否正在运行
            echo "检查后端容器状态..."
            docker ps -a | grep lms-backend

            # 检查后端容器是否正在运行
            echo "检查后端容器运行状态..."
            backend_running=false
            for i in {1..3}; do
              if docker ps | grep -q "lms-backend.*Up"; then
                echo "后端容器正在运行！"
                backend_running=true
                break
              else
                echo "等待后端容器启动... ($i/3)"
                sleep 10
              fi
            done

            # 如果后端容器启动失败，尝试本地构建
            if [ "$backend_running" = false ]; then
              echo "预构建镜像启动失败，停止容器并使用本地构建..."
              docker-compose -f docker-compose.yml down
              docker rmi lms-backend:latest || true
              echo "使用本地Dockerfile构建后端..."
              docker-compose -f docker-compose.yml build backend
              echo "重新启动后端服务..."
              docker-compose -f docker-compose.yml up -d backend
              sleep 20
              echo "检查本地构建的后端状态..."
              docker-compose -f docker-compose.yml logs backend --tail=20
            fi
            
            # 检查Django配置和环境变量
            echo "检查Django配置..."
            docker exec lms-backend python manage.py check || echo "Django配置检查失败"
            echo "检查容器内.env文件..."
            docker exec lms-backend ls -la /app/backend/.env || echo ".env文件不存在"
            docker exec lms-backend head -3 /app/backend/.env || echo "无法读取.env文件"

            # 启动前端容器（确保后端已准备好）
            echo "启动前端容器..."
            docker-compose -f docker-compose.yml up -d frontend

            # 检查启动状态
            echo "检查容器状态..."
            docker-compose -f docker-compose.yml ps

            # 检查后端容器日志
            echo "检查后端容器日志..."
            docker-compose -f docker-compose.yml logs backend --tail=20

            # 测试后端API是否可访问
            echo "测试后端API..."
            docker exec lms-backend curl -f http://localhost:8000/ || echo "API暂时不可访问，但容器正在运行"

            # 检查所有容器日志
            echo "检查所有容器日志..."
            docker-compose -f docker-compose.yml logs --tail=10

            echo "部署完成！"
